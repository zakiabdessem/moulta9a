// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// enum UserRole {
//   ADMIN
//   USER
// }

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  city                  String?
  adress                String?
  phone                 String?
  password              String?
  role                  String                 @default("USER")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  blogs                 Blog[]
  events                Event[]
  attendees             Attendee[]
  payments              Payment[]
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Adress {
  id      String @id @default(cuid())
  userId  String
  street  String
  city    String
  zipCode String
  country String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Event {
  id             String     @id @default(cuid())
  userId         String
  title          String
  description    String
  dateRangeFrom  DateTime
  dateRangeTo    DateTime
  enrollDeadline DateTime
  location       String
  image          String
  isPaid         Boolean
  price          Float
  capacity       Int
  attendees      Attendee[]
  payments       Payment[]
  speakers       Speaker[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Speaker {
  id      String @id @default(cuid())
  name    String
  bio     String
  image   String
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])
}

model Attendee {
  id         String    @id @default(cuid())
  eventId    String
  userId     String
  paymentId  String    @unique
  paid       Boolean
  enrolledAt DateTime
  paidAt     DateTime?

  payment Payment @relation(fields: [paymentId], references: [id])
  event   Event   @relation(fields: [eventId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([eventId])
  @@index([userId])
}

model Payment {
  id         String    @id @default(cuid())
  eventId    String
  userId     String
  type       String
  amount     Float
  paid       Boolean
  paidAt     DateTime?
  refundedAt DateTime?

  attendee Attendee?
  event    Event     @relation(fields: [eventId], references: [id])
  user     User      @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
}

model Blog {
  id      String @id @default(cuid())
  userId  String
  title   String
  content String
  image   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
